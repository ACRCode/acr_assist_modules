# Version 2.1
start = ReportingModule
ReportingModule =
    element ReportingModule { external "Metadata.rnc", DataElements, Rules, EndPoints }
Citation =
    element Citation {
        Coding?,
        attribute Url { xsd:anyURI }?,
        element Description { text }
    }+
# definitions for other parts of the schema
codingSystemAttr = attribute CodingSystem { text }
codeAttrs =
    codingSystemAttr?,
    attribute Code { xsd:token }
Diagnosis = element Diagnosis { codeAttrs, text }
Modality = element Modality { codeAttrs }
BodyRegion = element BodyRegion { codeAttrs }
imageElements =
    element Location { text },
    element Label { text }?
# start of the next Section Data Elements
DataElements = element DataElements { DataElementTypes+ }
DataElementTypes =
    ChoiceDataElement
    | NumericDataElement
    | IntegerDataElement
    | MultiChoiceDataElement
    | GlobalValue
    | ComputedDataElement
    | DateTimeDataElement
    | TimeSpanDataElement
GlobalValue =
    element GlobalValue {
        attribute Id { xsd:ID },
        text
    }
Diagrams =
    element Diagrams {
        element Diagram {
            element Location { text },
            element Label { text },
            attribute DisplaySequence { xsd:integer }?,
            attribute IsKeyDiagram { "true" | "false" }?
        }+
    }
DisplaySequence =
    attribute DisplaySequence {
        xsd:integer { minInclusive = "0" }
    }
baseElementContents =
    attribute Id { xsd:ID },
    attribute IsRequired { "true" | "false" }?,
    DisplaySequence?,
    CodableConcept?,
    element Label { text },
    element Hint { text }?,
    Diagrams?,
    element VoiceCommand { text }?,
    attribute IsInput { "true" | "false" }?,
    attribute Editable { "true" | "false" }?,
    attribute CanPrefillFromSource { "true" | "false" }?,
    attribute IsOutput { "true" | "false" }?,
    attribute Unit { text }?,
    Source?,
    element References { Citation+ }?
CodableConcept =
    element CodableConcept {
        attribute Name { text },
        Coding+
    }
Coding =
    element Coding {
        element System {
            attribute Value {
                "https://www.radelement.org/set"
                | "https://www.radelement.org/element"
                | "http://loinc.org"
                | "http://snomed.info/sct"
                | "http://www.ncbi.nlm.nih.gov/pubmed"
            }
        },
        element Version {
            attribute Value { text }
        },
        element Code {
            attribute Value { xsd:token }
        },
        element Display {
            attribute Value { text }
        },
        element UserSelected {
            attribute Value { "true" | "false" }
        }?,
        element Url {
            attribute Value { text }
        }?
    }+
Source =
    element Source {
        element Vendor { text },
        element Appname { text },
        element Version { text }
    }
authors = element authors { person*, org* }
person =
    element person {
        element name { text },
        (element orcid_id { text }?
         & element twitter_handle { text }*
         & element url { text }*
         & element role { "author" | "editor" | "translator" | "reviewer" | "contributor" }*)
    }
org =
    element organization {
        element name { text }
        & element abbreviation { text }?
        & element url { xsd:anyURI }?
        & element comment { text }?
        & element role { "contributor" | "sponsor" | "translator" | "reviewer" | "author" }*
    }
ChoiceNotRelevant =
    element ChoiceNotRelevant {
        attribute ChoiceValue { text },
        empty
    }
baseConditionalPropertyContents =
    ConditionType,
    element IsRelevant { "true" | "false" }?,
    element IsRequired { "true" | "false" }?,
    element DisplaySequence { xsd:integer }?
choiceConditionalProperty =
    element ConditionalProperty { baseConditionalPropertyContents, (ChoiceNotRelevant?)+ }
    
numericConditionalProperty =
    element ConditionalProperty {
        baseConditionalPropertyContents,
        element Minimum { xsd:decimal }?,
        element Maximum { xsd:decimal }?
    }
integerConditionalProperty =
    element ConditionalProperty {
        baseConditionalPropertyContents,
        element Minimum { xsd:integer }?,
        element Maximum { xsd:integer }?
    }
datetimeConditionalProperty = element ConditionalProperty { baseConditionalPropertyContents }
durationConditionalProperty =
    element ConditionalProperty {
        baseConditionalPropertyContents,
        element MinimumDay { xsd:integer }?,
        element MaximumDay { xsd:integer }?,
        element MinimumHours { xsd:integer }?,
        element MaximumHours { xsd:integer }?,
        element MinimumMinutes { xsd:integer }?,
        element MaximumMinutes { xsd:integer }?,
        element MinimumSeconds { xsd:integer }?,
        element MaximumSeconds { xsd:integer }?
    }
computedValue =
    element ArithmeticExpression { text }
    | element TextExpression { (text | InsertValue)* }
valueBranches =
    element Branch { ConditionType, (computedValue | valueDecisionPoint) }+,
    element DefaultBranch { computedValue | valueDecisionPoint }?
valueDecisionPoint = element DecisionPoint { valueBranches }
ComputedDataElement =
    element ComputedDataElement {
        attribute Id { xsd:ID },
        DisplaySequence?,
        attribute ShowValue { "true" | "false" }?,
        element Label { text }?,
        element Hint { text }?,
        Diagrams?,
        (computedValue | valueDecisionPoint)
    }
NumericDataElement =
    element NumericDataElement {
        baseElementContents,
        element Minimum { xsd:decimal }?,
        element Maximum { xsd:decimal }?,
        element ConditionalProperties { numericConditionalProperty+ }?
    }
IntegerDataElement =
    element IntegerDataElement {
        baseElementContents,
        element Minimum { xsd:integer }?,
        element Maximum { xsd:integer }?,
        element ConditionalProperties { integerConditionalProperty+ }?
    }
DateTimeDataElement =
    element DateTimeDataElement {
        (baseElementContents,
         element ConditionalProperties { datetimeConditionalProperty+ }?)        
    }
    
 
TimeSpanDataElement =
    element TimeSpanDataElement {
        baseElementContents,
        attribute ShowDays { xsd:boolean }?,
        attribute ShowHours { xsd:boolean }?,
        attribute ShowMinutes { xsd:boolean }?,
        attribute ShowSeconds { xsd:boolean }?,
        element MinimumDay { xsd:integer }?,
        element MaximumDay { xsd:integer }?,
        element MinimumHours { xsd:integer }?,
        element MaximumHours { xsd:integer }?,
        element MinimumMinutes { xsd:integer }?,
        element MaximumMinutes { xsd:integer }?,
        element MinimumSeconds { xsd:integer }?,
        element MaximumSeconds { xsd:integer }?,
        element ConditionalProperties { durationConditionalProperty+ }?
    }
    
Choice =
    element Choice {
        element Value { xsd:token },
        element Label { text },
        element Hint { text }?,
        element VoiceCommand { text }?,
        attribute IsDefault { "true" | "false" }?,
        Diagrams?,
        CodableConcept?,
        element References { Citation+ }?
    }
ChoiceInfo = element ChoiceInfo { Choice+ }
imageMapStyleAttributes =
    attribute Outline { text }?,
    attribute HoverFill { text }?,
    attribute SelectedFill { text }?
ImageMap =
    element ImageMap {
        imageElements,
        element DrawStyle { imageMapStyleAttributes, empty }?,
        element Map {
            element Area {
                attribute Shape { "rect" | "poly" | "circle" },
                attribute Coords { text },
                attribute ChoiceValue { xsd:token },
                imageMapStyleAttributes,
                empty
            }+
        }
    }
ChoiceDataElement =
    element ChoiceDataElement {
        attribute AllowFreetext { "true" | "false" }?,
        baseElementContents,
        ChoiceInfo,
        ImageMap?,
        element ConditionalProperties { choiceConditionalProperty+ }?
    }
MultiChoiceDataElement =
    element MultiChoiceDataElement {
        attribute AllowFreetext { "true" | "false" }?,
        baseElementContents,
        ChoiceInfo,
        ImageMap?,
        element ConditionalProperties { choiceConditionalProperty+ }?
    }
SectionIf =
    element SectionIf {
        attribute DataElementId { xsd:IDREF },
        TextTemplateContent?
    }?
SectionIfNot =
    element SectionIfNot {
        attribute DataElementId { xsd:IDREF },
        TextTemplateContent
    }?
    
# Start of next section (RULES)
ConditionType = AndCondition | OrCondition | NotCondition | SectionIf | SectionIfNot
ConditionType |= EqualCondition | GreaterThanCondition | LessThanCondition | NotEqualCondition
ConditionType |= GreaterThanOrEqualsCondition | LessThanOrEqualsCondition
ConditionType |= ContainsCondition | HasAnyNChoicesCondition
AndCondition =
    element AndCondition {
        ConditionType+
    }
OrCondition =
    element OrCondition {
        ConditionType+
    }
NotCondition = element NotCondition { ConditionType+ }
dataElementIdAttribute = attribute DataElementId { xsd:IDREF }
comparisonConditionContents =
    dataElementIdAttribute,
    attribute ComparisonValue { xsd:token }
NotEqualCondition = element NotEqualCondition { comparisonConditionContents }
EqualCondition = element EqualCondition { comparisonConditionContents }
GreaterThanCondition = element GreaterThanCondition { comparisonConditionContents }
LessThanCondition = element LessThanCondition { comparisonConditionContents }
GreaterThanOrEqualsCondition = element GreaterThanOrEqualsCondition { comparisonConditionContents }
LessThanOrEqualsCondition = element LessThanOrEqualsCondition { comparisonConditionContents }
HasAnyNChoicesCondition =
    element HasAnyNChoicesCondition {
        dataElementIdAttribute,
        attribute MinimumChoices { xsd:positiveInteger }
    }
ContainsCondition =
    element ContainsCondition {
        dataElementIdAttribute,
        attribute ComparisonValue { xsd:token }
    }
Rules = element Rules { DecisionPoint }

DataElementRef =
    element DataElementRef {
        attribute DataElementId { xsd:IDREF },
        empty
    }
ChoiceRef =
    element ChoiceRef {
        attribute DataElementId { xsd:IDREF },
        attribute ChoiceValue { xsd:token },
        empty
    }

DecisionPoint =
    element DecisionPoint {
        attribute Id { xsd:ID },
        element Label { text },
        element Description { text }?,
        Branch,
        element DefaultBranch {
            element Label { text }?,            
            (EndPointRef | DecisionPoint)
        }?
    }
Branch =
    element Branch {
        element Label { text }?,
        ConditionType?,
        (EndPointRef
         | DecisionPoint
         | ReportText)
        ?,
        Branch?
    }+
    
# Begin ENDPOINTS Section
EndPointRef =
    element EndPointRef {
        attribute EndPointId { xsd:IDREF },
        attribute DiagramId { xsd:IDREF }?,
        element Label { text }?,
        element Description { text }?
    }
EndPoints =
    element EndPoints {
        element TemplatePartial {
            attribute Id { xsd:ID },
            Branch
        }*,
        element EndPoint {
            attribute Id { xsd:ID },
            element Label { text }?,
            Diagnosis?,
            ReportSections,
            ActionableFinding?,
            ImagingFollowup?
        }+
    }
ReportSections = element ReportSections { ReportSection+ }
ReportSection = element ReportSection { sectionIdAttr, Branch }
ReportText =
    element ReportText {
        attribute Type {
            "PlainText"
            | "InsertPartialTemplate"
            | "InsertDataElementValue"
            | "Newline"
            | "Tab"
            | "Space"
        },
        attribute Value { text }?,
        text
    }+

sectionIdAttr =
    attribute SectionId {
        "findings" | "impression" | "recommendation" | "impressionRecommendation" | "citation"
    },
    attribute SubSectionName { text }?
recommendationBase =
    element ClinicalCondition { text }?,
    element References { Citation+ }?,
    element EvidenceLevel { codingSystemAttr, xsd:token }?
timeFrame =
    element RecommendedTimeFrame {
        attribute Earliest { xsd:duration },
        attribute Latest { xsd:duration }?,
        empty
    }
ImagingFollowup =
    element ImagingFollowup {
        recommendationBase,
        element PreferredImagingExam { codeAttrs, text },
        element AcceptableImagingExams { Exam+ },
        element IndicationForFollowup { codeAttrs, text },
        timeFrame
    }
ActionableFinding =
    element ActionableFinding {
        attribute Category { text },
        empty
    }
Exam =
    element Exam {
        attribute Code { text },
        attribute CodeSystem { text },
        attribute Modality { text },
        attribute BodyRegion { text },
        text
    }

TextTemplateContent = (text | templateTags)*
NewLine = element NewLine { empty }
templateTags = InsertValue | InsertPartial | PlainText | NewLine
PlainText = element PlainText { text }
InsertValue =
    element InsertValue {
        attribute DataElementId { xsd:IDREF },
        attribute SignificantDigits { xsd:integer }?,
        empty
    }
InsertPartial =
    element InsertPartial {
        attribute PartialId { xsd:IDREF },
        empty
    }
